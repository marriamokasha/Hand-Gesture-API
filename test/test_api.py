import pytest

from fastapi.testclient import TestClient

from app.main import app

from app.utils import gesture_map

client = TestClient(app)

def test_health_check():
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "ok"}

def test_prediction_valid_input():
    # Raw landmarks â€” 21 points * 3 = 63 float values (simulate raw hand landmarks)
    raw_landmarks = [0.1 * (i % 10) for i in range(63)]
    response = client.post("/predict", json={"landmarks": raw_landmarks})
    assert response.status_code == 200
    json_resp = response.json()
    assert "prediction" in json_resp or "error" in json_resp
    if "prediction" in json_resp:
        # Confirm prediction is int (model output)
        assert isinstance(json_resp["prediction"], int)

def test_prediction_invalid_input():
    bad_input = {"wrong_key": [1, 2, 3]}
    response = client.post("/predict", json=bad_input)
    assert response.status_code == 422  # Pydantic validation error due to missing landmarks

def test_model_loaded():
    from app.main import model
    assert model is not None

def test_prediction_output_type():
    raw_landmarks = [0.1 * (i % 10) for i in range(63)]
    response = client.post("/predict", json={"landmarks": raw_landmarks})
    json_resp = response.json()
    if "prediction" in json_resp:
        assert isinstance(json_resp["prediction"], int)




@pytest.mark.parametrize(
    "landmarks, expected_gesture",
    [
        ([216.8288498,445.4415037,-3.47334E-07,232.835907,424.4237959,-0.003666276,250.3634262,408.2810154,-0.018243711,262.4885101,391.9539695,-0.032883011,262.2626724,375.6446603,-0.045600981,276.3482208,428.8293108,-0.02154845,293.274971,434.7688186,-0.024566611,284.2369537,434.5753627,-0.025011091,275.0169525,431.9962685,-0.026068259,274.8564606,446.5038881,-0.025041997,287.2913818,447.878466,-0.018858779,279.7951355,446.141564,-0.012792351,271.1307449,445.0561196,-0.013712516,269.3024368,461.1808054,-0.026928233,279.442749,459.7062052,-0.016944723,273.633728,458.3626605,-0.006119302,265.0281601,457.3670213,-0.005124429,262.9829407,473.267218,-0.029287895,271.4827652,470.5034527,-0.019768057,265.3413849,468.3857499,-0.006587919,258.2434158,467.4281622,0.000229045], "like"),
        ([352.1090012,441.8910522,8.39694E-07,322.9741287,424.5524902,-0.047196142,306.7742615,392.6732178,-0.075840257,315.0997696,361.5603027,-0.107857712,330.0961304,339.0601196,-0.137441933,310.3532867,332.9312439,-0.035418931,294.8931198,293.0122986,-0.074545167,286.5514755,267.2165527,-0.10068804,281.1132431,243.9545288,-0.1184569,336.648056,328.7883301,-0.044419765,338.4800034,279.1476746,-0.091995798,338.2930069,248.7756348,-0.122990757,341.3048859,223.5547943,-0.138780951,361.484848,337.9155884,-0.059480999,364.3485718,311.4147339,-0.127336606,350.109787,346.3960571,-0.13528277,342.9215012,374.1790161,-0.120613053,384.4320831,354.329071,-0.078090981,380.0619278,333.6481018,-0.129684463,366.6803513,353.7219238,-0.127770185,358.6961288,373.2822571,-0.113212764], "peace"),
        ([245.0455627,212.5800323,-1.48782E-07,244.6358643,199.6121826,-0.003351305,240.6021652,185.3467865,-0.007228032,238.6755066,174.0189972,-0.011758006,241.1245193,165.3246918,-0.016247632,225.3932877,184.659317,-0.005461176,214.2185211,187.7175903,-0.011381656,217.5975952,190.7697906,-0.017125575,222.6565475,191.486618,-0.020476092,221.7600632,191.7470093,-0.008765843,212.7026138,194.4578552,-0.012998269,216.0672913,196.6350403,-0.017439995,220.4526901,197.335968,-0.021308769,219.1987839,199.4273224,-0.012526147,210.2898331,200.8564301,-0.017957063,213.4489517,203.1512756,-0.020516366,218.4614868,204.0762939,-0.022272559,217.6937256,207.13237,-0.01647706,205.3977814,206.920639,-0.020183608,197.1161957,207.8582458,-0.021299133,190.4247894,207.8096619,-0.022145234], "call"),
        ([82.66316414,287.539032,2.28755E-07,93.54971695,284.3915405,-0.009005366,104.4644279,276.9118958,-0.01438889,112.5082397,270.8421021,-0.02036739,112.522625,263.8317871,-0.025137899,92.26051712,256.8581238,-0.003845629,102.1913795,250.903656,-0.022077307,109.0617371,253.8737335,-0.03729216,113.1076698,259.3311157,-0.043976869,87.05983543,252.5785828,-0.007853284,91.93439484,237.4653015,-0.017718665,98.2190094,228.7828522,-0.026151,103.794342,222.6244354,-0.030899283,80.94599533,252.0727081,-0.014821377,82.67539215,237.171875,-0.025814636,86.15744019,227.7184753,-0.03344867,89.92933846,220.6417236,-0.036712687,74.81568146,254.8939514,-0.022833278,72.86536217,242.8594666,-0.031189891,72.33286858,234.1510468,-0.033231121,72.79426575,227.107193,-0.033126488], "ok"),
    ]
)
def test_predict_real_data(landmarks, expected_gesture):
    response = client.post("/predict", json={"landmarks": landmarks})
    assert response.status_code == 200
    data = response.json()
    assert data["gesture"] == expected_gesture
